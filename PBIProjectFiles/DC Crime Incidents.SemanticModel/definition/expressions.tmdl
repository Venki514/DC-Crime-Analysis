expression CrimeIncidents_2023 = ```
		let
		    Source = Json.Document(Web.Contents("https://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer/5/query?outFields=*&where=1%3D1&f=geojson")), 
		    ExtractFeatures = Source[features], 
		    FeaturesToTable = Table.FromList(ExtractFeatures, Splitter.SplitByNothing(), null, null, ExtraValues.Error), 
		    ExpandFeatureRecords = Table.ExpandRecordColumn(FeaturesToTable, "Column1", {"type", "id", "geometry", "properties"}, {"type", "id", "geometry", "properties"}), 
		    SelectPropertiesOnly = Table.SelectColumns(ExpandFeatureRecords,{"properties"}), 
		    ExpandAllPropertyFields = Table.ExpandRecordColumn(SelectPropertiesOnly, "properties", {"CCN", "REPORT_DAT", "SHIFT", "METHOD", "OFFENSE", "BLOCK", "XBLOCK", "YBLOCK", "WARD", "ANC", "DISTRICT", "PSA", "NEIGHBORHOOD_CLUSTER", "BLOCK_GROUP", "CENSUS_TRACT", "VOTING_PRECINCT", "LATITUDE", "LONGITUDE", "BID", "START_DATE", "END_DATE", "OBJECTID", "OCTO_RECORD_ID"}, {"CCN", "REPORT_DAT", "SHIFT", "METHOD", "OFFENSE", "BLOCK", "XBLOCK", "YBLOCK", "WARD", "ANC", "DISTRICT", "PSA", "NEIGHBORHOOD_CLUSTER", "BLOCK_GROUP", "CENSUS_TRACT", "VOTING_PRECINCT", "LATITUDE", "LONGITUDE", "BID", "START_DATE", "END_DATE", "OBJECTID", "OCTO_RECORD_ID"}), 
		    SetColumnDataTypes = Table.TransformColumnTypes(ExpandAllPropertyFields,{{"CCN", Int64.Type}, {"SHIFT", type text}, {"METHOD", type text}, {"OFFENSE", type text}, {"BLOCK", type text}, {"XBLOCK", type number}, {"YBLOCK", type number}, {"WARD", Int64.Type}, {"DISTRICT", Int64.Type}, {"ANC", type text}, {"PSA", Int64.Type}, {"NEIGHBORHOOD_CLUSTER", type text}, {"BLOCK_GROUP", type text}, {"CENSUS_TRACT", type text}, {"VOTING_PRECINCT", type text}, {"LATITUDE", type number}, {"LONGITUDE", type number}, {"BID", type text}, {"OBJECTID", Int64.Type}}),
		    FilterValidDates = Table.SelectRows(SetColumnDataTypes, each ([START_DATE] <> null) and ([END_DATE] <> null)), 
		    ConvertReportDateToDateTime = Table.AddColumn(FilterValidDates, "REPORT_DATETIME", each if [REPORT_DAT] = null then null else #datetime(1970,1,1,0,0,0) + #duration(0,0,0, Number.RoundDown([REPORT_DAT] / 1000))), 
		    ConvertStartDateToDateTime = Table.AddColumn(ConvertReportDateToDateTime, "START_DATETIME", each if [START_DATE] = null then null else #datetime(1970,1,1,0,0,0) + #duration(0,0,0, Number.RoundDown([START_DATE] / 1000))), 
		    ConvertEndDateToDateTime = Table.AddColumn(ConvertStartDateToDateTime, "END_DATETIME", each if [END_DATE] = null then null else #datetime(1970,1,1,0,0,0) + #duration(0,0,0, Number.RoundDown([END_DATE] / 1000))), 
		    AddReportDate = Table.AddColumn(ConvertEndDateToDateTime, "REPORT_DATE", each Date.From([REPORT_DATETIME]), type date), 
		    AddReportTime = Table.AddColumn(AddReportDate, "REPORT_TIME", each Time.From([REPORT_DATETIME]), type time), 
		    AddStartDate = Table.AddColumn(AddReportTime, "START_DATE_ONLY", each Date.From([START_DATETIME]), type date), 
		    AddStartTime = Table.AddColumn(AddStartDate, "START_TIME", each Time.From([START_DATETIME]), type time), 
		    AddEndDate = Table.AddColumn(AddStartTime, "END_DATE_ONLY", each Date.From([END_DATETIME]), type date), 
		    AddEndTime = Table.AddColumn(AddEndDate, "END_TIME", each Time.From([END_DATETIME]), type time), 
		    RoundToNearest15Mins = Table.AddColumn(AddEndTime, "NEAREST_15M_TIME", each let t = Time.From([START_TIME]), m = Number.Round(Time.Minute(t) / 15) * 15 in if m = 60 then #time(Time.Hour(t) + 1, 0, 0) else #time(Time.Hour(t), m, 0), type time), 
		    RemoveOriginalDateColumns = Table.RemoveColumns(RoundToNearest15Mins,{"OCTO_RECORD_ID", "START_DATETIME", "END_DATETIME", "REPORT_DATETIME", "START_DATE", "END_DATE", "REPORT_DAT"}),
		    FinalTable = Table.SelectRows(RemoveOriginalDateColumns, each true)
		in
		    FinalTable
		```
	lineageTag: f84facab-6546-4202-bfd3-9b75b92dc555

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression CrimeIncidents_2024 = ```
		let
		    Source = Json.Document(Web.Contents("https://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer/6/query?outFields=*&where=1%3D1&f=geojson")), 
		    ExtractFeatures = Source[features], 
		    FeaturesToTable = Table.FromList(ExtractFeatures, Splitter.SplitByNothing(), null, null, ExtraValues.Error), 
		    ExpandFeatureRecords = Table.ExpandRecordColumn(FeaturesToTable, "Column1", {"type", "id", "geometry", "properties"}, {"type", "id", "geometry", "properties"}), 
		    SelectPropertiesOnly = Table.SelectColumns(ExpandFeatureRecords,{"properties"}), 
		    ExpandAllPropertyFields = Table.ExpandRecordColumn(SelectPropertiesOnly, "properties", {"CCN", "REPORT_DAT", "SHIFT", "METHOD", "OFFENSE", "BLOCK", "XBLOCK", "YBLOCK", "WARD", "ANC", "DISTRICT", "PSA", "NEIGHBORHOOD_CLUSTER", "BLOCK_GROUP", "CENSUS_TRACT", "VOTING_PRECINCT", "LATITUDE", "LONGITUDE", "BID", "START_DATE", "END_DATE", "OBJECTID", "OCTO_RECORD_ID"}, {"CCN", "REPORT_DAT", "SHIFT", "METHOD", "OFFENSE", "BLOCK", "XBLOCK", "YBLOCK", "WARD", "ANC", "DISTRICT", "PSA", "NEIGHBORHOOD_CLUSTER", "BLOCK_GROUP", "CENSUS_TRACT", "VOTING_PRECINCT", "LATITUDE", "LONGITUDE", "BID", "START_DATE", "END_DATE", "OBJECTID", "OCTO_RECORD_ID"}), 
		    SetColumnDataTypes = Table.TransformColumnTypes(ExpandAllPropertyFields,{{"CCN", Int64.Type}, {"SHIFT", type text}, {"METHOD", type text}, {"OFFENSE", type text}, {"BLOCK", type text}, {"XBLOCK", type number}, {"YBLOCK", type number}, {"WARD", Int64.Type}, {"DISTRICT", Int64.Type}, {"ANC", type text}, {"PSA", Int64.Type}, {"NEIGHBORHOOD_CLUSTER", type text}, {"BLOCK_GROUP", type text}, {"CENSUS_TRACT", type text}, {"VOTING_PRECINCT", type text}, {"LATITUDE", type number}, {"LONGITUDE", type number}, {"BID", type text}, {"OBJECTID", Int64.Type}}),
		    FilterValidDates = Table.SelectRows(SetColumnDataTypes, each ([START_DATE] <> null) and ([END_DATE] <> null)), 
		    ConvertReportDateToDateTime = Table.AddColumn(FilterValidDates, "REPORT_DATETIME", each if [REPORT_DAT] = null then null else #datetime(1970,1,1,0,0,0) + #duration(0,0,0, Number.RoundDown([REPORT_DAT] / 1000))), 
		    ConvertStartDateToDateTime = Table.AddColumn(ConvertReportDateToDateTime, "START_DATETIME", each if [START_DATE] = null then null else #datetime(1970,1,1,0,0,0) + #duration(0,0,0, Number.RoundDown([START_DATE] / 1000))), 
		    ConvertEndDateToDateTime = Table.AddColumn(ConvertStartDateToDateTime, "END_DATETIME", each if [END_DATE] = null then null else #datetime(1970,1,1,0,0,0) + #duration(0,0,0, Number.RoundDown([END_DATE] / 1000))), 
		    AddReportDate = Table.AddColumn(ConvertEndDateToDateTime, "REPORT_DATE", each Date.From([REPORT_DATETIME]), type date), 
		    AddReportTime = Table.AddColumn(AddReportDate, "REPORT_TIME", each Time.From([REPORT_DATETIME]), type time), 
		    AddStartDate = Table.AddColumn(AddReportTime, "START_DATE_ONLY", each Date.From([START_DATETIME]), type date), 
		    AddStartTime = Table.AddColumn(AddStartDate, "START_TIME", each Time.From([START_DATETIME]), type time), 
		    AddEndDate = Table.AddColumn(AddStartTime, "END_DATE_ONLY", each Date.From([END_DATETIME]), type date), 
		    AddEndTime = Table.AddColumn(AddEndDate, "END_TIME", each Time.From([END_DATETIME]), type time), 
		    RoundToNearest15Mins = Table.AddColumn(AddEndTime, "NEAREST_15M_TIME", each let t = Time.From([START_TIME]), m = Number.Round(Time.Minute(t) / 15) * 15 in if m = 60 then #time(Time.Hour(t) + 1, 0, 0) else #time(Time.Hour(t), m, 0), type time), 
		    RemoveOriginalDateColumns = Table.RemoveColumns(RoundToNearest15Mins,{"OCTO_RECORD_ID", "START_DATETIME", "END_DATETIME", "REPORT_DATETIME", "START_DATE", "END_DATE", "REPORT_DAT"}),
		    FinalTable = Table.SelectRows(RemoveOriginalDateColumns, each true)
		in
		    FinalTable
		```
	lineageTag: 383318f6-33e4-4f3b-9023-5e5a7aa82fc1

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression CrimeIncidents_2025 = ```
		let
		    Source = Json.Document(Web.Contents("https://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer/7/query?outFields=*&where=1%3D1&f=geojson")), 
		    ExtractFeatures = Source[features], 
		    FeaturesToTable = Table.FromList(ExtractFeatures, Splitter.SplitByNothing(), null, null, ExtraValues.Error), 
		    ExpandFeatureRecords = Table.ExpandRecordColumn(FeaturesToTable, "Column1", {"type", "id", "geometry", "properties"}, {"type", "id", "geometry", "properties"}), 
		    SelectPropertiesOnly = Table.SelectColumns(ExpandFeatureRecords,{"properties"}), 
		    ExpandAllPropertyFields = Table.ExpandRecordColumn(SelectPropertiesOnly, "properties", {"CCN", "REPORT_DAT", "SHIFT", "METHOD", "OFFENSE", "BLOCK", "XBLOCK", "YBLOCK", "WARD", "ANC", "DISTRICT", "PSA", "NEIGHBORHOOD_CLUSTER", "BLOCK_GROUP", "CENSUS_TRACT", "VOTING_PRECINCT", "LATITUDE", "LONGITUDE", "BID", "START_DATE", "END_DATE", "OBJECTID", "OCTO_RECORD_ID"}, {"CCN", "REPORT_DAT", "SHIFT", "METHOD", "OFFENSE", "BLOCK", "XBLOCK", "YBLOCK", "WARD", "ANC", "DISTRICT", "PSA", "NEIGHBORHOOD_CLUSTER", "BLOCK_GROUP", "CENSUS_TRACT", "VOTING_PRECINCT", "LATITUDE", "LONGITUDE", "BID", "START_DATE", "END_DATE", "OBJECTID", "OCTO_RECORD_ID"}), 
		    SetColumnDataTypes = Table.TransformColumnTypes(ExpandAllPropertyFields,{{"CCN", Int64.Type}, {"SHIFT", type text}, {"METHOD", type text}, {"OFFENSE", type text}, {"BLOCK", type text}, {"XBLOCK", type number}, {"YBLOCK", type number}, {"WARD", Int64.Type}, {"DISTRICT", Int64.Type}, {"ANC", type text}, {"PSA", Int64.Type}, {"NEIGHBORHOOD_CLUSTER", type text}, {"BLOCK_GROUP", type text}, {"CENSUS_TRACT", type text}, {"VOTING_PRECINCT", type text}, {"LATITUDE", type number}, {"LONGITUDE", type number}, {"BID", type text}, {"OBJECTID", Int64.Type}}),
		    FilterValidDates = Table.SelectRows(SetColumnDataTypes, each ([START_DATE] <> null) and ([END_DATE] <> null)), 
		    ConvertReportDateToDateTime = Table.AddColumn(FilterValidDates, "REPORT_DATETIME", each if [REPORT_DAT] = null then null else #datetime(1970,1,1,0,0,0) + #duration(0,0,0, Number.RoundDown([REPORT_DAT] / 1000))), 
		    ConvertStartDateToDateTime = Table.AddColumn(ConvertReportDateToDateTime, "START_DATETIME", each if [START_DATE] = null then null else #datetime(1970,1,1,0,0,0) + #duration(0,0,0, Number.RoundDown([START_DATE] / 1000))), 
		    ConvertEndDateToDateTime = Table.AddColumn(ConvertStartDateToDateTime, "END_DATETIME", each if [END_DATE] = null then null else #datetime(1970,1,1,0,0,0) + #duration(0,0,0, Number.RoundDown([END_DATE] / 1000))), 
		    AddReportDate = Table.AddColumn(ConvertEndDateToDateTime, "REPORT_DATE", each Date.From([REPORT_DATETIME]), type date), 
		    AddReportTime = Table.AddColumn(AddReportDate, "REPORT_TIME", each Time.From([REPORT_DATETIME]), type time), 
		    AddStartDate = Table.AddColumn(AddReportTime, "START_DATE_ONLY", each Date.From([START_DATETIME]), type date), 
		    AddStartTime = Table.AddColumn(AddStartDate, "START_TIME", each Time.From([START_DATETIME]), type time), 
		    AddEndDate = Table.AddColumn(AddStartTime, "END_DATE_ONLY", each Date.From([END_DATETIME]), type date), 
		    AddEndTime = Table.AddColumn(AddEndDate, "END_TIME", each Time.From([END_DATETIME]), type time), 
		    RoundToNearest15Mins = Table.AddColumn(AddEndTime, "NEAREST_15M_TIME", each let t = Time.From([START_TIME]), m = Number.Round(Time.Minute(t) / 15) * 15 in if m = 60 then #time(Time.Hour(t) + 1, 0, 0) else #time(Time.Hour(t), m, 0), type time), 
		    RemoveOriginalDateColumns = Table.RemoveColumns(RoundToNearest15Mins,{"OCTO_RECORD_ID", "START_DATETIME", "END_DATETIME", "REPORT_DATETIME", "START_DATE", "END_DATE", "REPORT_DAT"}),
		    FinalTable = Table.SelectRows(RemoveOriginalDateColumns, each true)
		in
		    FinalTable
		```
	lineageTag: 108eed28-cc48-46b2-8483-986eb5535e87

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

