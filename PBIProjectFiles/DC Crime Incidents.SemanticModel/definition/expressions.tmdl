expression fnGetDataForLayer =
		let
		    // Define the function
		    fnGetDataForLayer = (layerId as text) as table =>
		        let
		            // --- Parameters specific to fetching within the function ---
		            MapServerUrl = "https://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer",
		            LayerQueryUrl = MapServerUrl & "/" & layerId & "/query", // Construct specific layer URL
		            PageSize = 1000,
		            BaseQuery = [
		                where = "1=1",
		                outFields = "*",
		                f = "geojson",
		                outSR = "4326"
		            ],
		
		            // --- Function to Fetch a Single Page (Specific to this layer) ---
		            FetchPage = (offset as number) as record =>
		                let
		                    PageQuery = BaseQuery & [
		                        resultOffset = Text.From(offset),
		                        resultRecordCount = Text.From(PageSize)
		                    ],
		                    RawResponse = try Web.Contents(LayerQueryUrl, [Query = PageQuery]), // Use LayerQueryUrl
		                    JsonResult = if RawResponse[HasError] then null else Json.Document(RawResponse[Value])
		                in
		                    JsonResult,
		
		            // --- Generate List of Pages using List.Generate ---
		            ListOfFeaturePages = List.Generate(
		                () => [PageResult = FetchPage(0), Offset = 0],
		                (Previous) => Previous[PageResult] <> null and List.Count(Previous[PageResult][features]?) > 0,
		                (Previous) =>
		                    let
		                        NextOffset = Previous[Offset] + List.Count(Previous[PageResult][features]),
		                        NextPageResult = FetchPage(NextOffset)
		                    in
		                        [PageResult = NextPageResult, Offset = NextOffset],
		                (Current) => Current[PageResult][features]?
		            ),
		
		            // --- Combine Features from All Pages ---
		            CombinedFeatures = List.Combine(List.Select(ListOfFeaturePages, each _ <> null)),
		
		            // --- Check if any features were returned for this layer ---
		            OutputTable = if List.IsEmpty(CombinedFeatures) then
		                             // Return empty table with expected schema if no features
		                             // IMPORTANT: Adjust column names/types if schema varies significantly between layers
		                             #table(
		                                 {"CCN", "REPORT_DAT", "SHIFT", "METHOD", "OFFENSE", "BLOCK", "XBLOCK", "YBLOCK", "WARD", "ANC", "DISTRICT", "PSA", "NEIGHBORHOOD_CLUSTER", "BLOCK_GROUP", "CENSUS_TRACT", "VOTING_PRECINCT", "LATITUDE", "LONGITUDE", "BID", "START_DATE", "END_DATE", "OBJECTID", "OCTO_RECORD_ID"},
		                                 {}
		                             )
		                         else
		                             let
		                                 // --- Standard Transformations (copied from original query) ---
		                                 Source = [features = CombinedFeatures], // Create structure for transformations
		                                 ExtractFeatures = Source[features],
		                                 FeaturesToTable = Table.FromList(ExtractFeatures, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
		                                 ExpandFeatureRecords = Table.ExpandRecordColumn(FeaturesToTable, "Column1", {"properties"}, {"properties"}), // Only need properties now
		                                 // IMPORTANT: Assume properties schema is consistent enough. If not, more dynamic expansion needed.
		                                 ExpandAllPropertyFields = Table.ExpandRecordColumn(ExpandFeatureRecords, "properties", {"CCN", "REPORT_DAT", "SHIFT", "METHOD", "OFFENSE", "BLOCK", "XBLOCK", "YBLOCK", "WARD", "ANC", "DISTRICT", "PSA", "NEIGHBORHOOD_CLUSTER", "BLOCK_GROUP", "CENSUS_TRACT", "VOTING_PRECINCT", "LATITUDE", "LONGITUDE", "BID", "START_DATE", "END_DATE", "OBJECTID", "OCTO_RECORD_ID"}, {"CCN", "REPORT_DAT", "SHIFT", "METHOD", "OFFENSE", "BLOCK", "XBLOCK", "YBLOCK", "WARD", "ANC", "DISTRICT", "PSA", "NEIGHBORHOOD_CLUSTER", "BLOCK_GROUP", "CENSUS_TRACT", "VOTING_PRECINCT", "LATITUDE", "LONGITUDE", "BID", "START_DATE", "END_DATE", "OBJECTID", "OCTO_RECORD_ID"})
		                                 // NOTE: Removed some intermediate expansions if only properties are needed directly
		                             in
		                                 ExpandAllPropertyFields
		
		        // Result of the function is the table (either empty or with data)
		        in
		            OutputTable
		in
		    // Output the function itself so it can be invoked
		    fnGetDataForLayer
	lineageTag: 4a1034eb-0b1e-41e2-b646-a6f80b7ff34e

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

